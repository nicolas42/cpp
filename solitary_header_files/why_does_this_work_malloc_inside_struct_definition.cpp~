/*
  g++ -std=c++11 main.cpp; ./a.out
*/

#include <iostream>

// namespace Vector {

typedef struct Coordinate {
  int x = 0;
  int y = 0;
} Coordinate;

struct Vector
{
  int allocated = 2;
  int length = 0;
  int size = sizeof(Coordinate);
  Coordinate* data = (Coordinate*)malloc(2 * sizeof(Coordinate));
  
};

typedef struct Vector Vector;

Vector init(Vector a)
{
  a.allocated = 10;
  a.length = 0;
  a.size = sizeof(Coordinate);
  a.data = (Coordinate*)malloc(a.allocated * a.size);
  return a;
}

Vector maybe_grow(Vector a)
{
  if ( a.length == a.allocated ) {
    a.allocated *= 2;
    a.data = (Coordinate*)realloc(a.data, a.allocated * a.size);
  }
  return a;
}

Vector append(Vector a, Coordinate b)
{
  a = maybe_grow(a);
  a.data[a.length] = b;
  a.length += 1;
  return a;
}

Vector print(Vector a)
{
  for (int i=0; i<a.length; i+=1){
    std::cout << a.data[i].x << " " <<  a.data[i].y << " ";
  }
  return a;
}
  
  
// }




int main(){

  Vector a;
  
  for (int i=0; i<1000000; i+=1){
    Coordinate c;
    c.x=i; c.y=2*i;
    a = append(a,c);
  }
  print(a);

}
